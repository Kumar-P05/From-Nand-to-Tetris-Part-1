// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:



    /**

     * D-Mux Gate is used to distribute the load to addresses and rest 0 reardless!

     * Load for every 8-Register RAM is named RL{no.}, where no. is the number of the RAM from the start: 1 -> 8

     * The address as contains both address of the RAM(s) & thier Regesters, we can split them in 2 half.

     * First 3 values represent RAM(s) selector and last 3 values represent Regesters' selector.

     * Since the indexing is from right to left, 0 to 2: Register and 3 to 5: RAM(s) selector.

     */

    DMux8Way(in = load, sel = address[3..5], a = RL1, b = RL2, c = RL3, d = RL4, e = RL5, f = RL6, g = RL7, h = RL8);




    /**

     * We create RAM(s) here (n = 8), with respective addresses, loads and same input. Output is names R{no.},
     * where no. is the number of the Register from the start: 1 -> 8.

     */

    RAM8(in = in, load = RL1, address = address[0..2], out = R1);

    RAM8(in = in, load = RL2, address = address[0..2], out = R2);

    RAM8(in = in, load = RL3, address = address[0..2], out = R3);

    RAM8(in = in, load = RL4, address = address[0..2], out = R4);

    RAM8(in = in, load = RL5, address = address[0..2], out = R5);

    RAM8(in = in, load = RL6, address = address[0..2], out = R6);

    RAM8(in = in, load = RL7, address = address[0..2], out = R7);

    RAM8(in = in, load = RL8, address = address[0..2], out = R8);





    // For Output we use Mux gate to select the RAM(s) output from selector => address.

    Mux8Way16(a = R1, b = R2, c = R3, d = R4, e = R5, f = R6, g = R7, h = R8, sel = address[3..5], out = out);




}